{"version":3,"sources":["popover/popover.js"],"names":[],"mappings":"qBASM,OAAA,0BAAA,oCAEA,WAAA,cAEA,GAAA,KAAA,UACA,UAAA,UACA,YAAA,GACA,WAAA,EACA,QAAA,EACA,UAAA,QACA,SAAA,2BACA,iBAAA,EACF,QAAA,oBAEA,MAAA,WAEE,QAAA,sBAEE,QAGA,MAAA,WAAA,SAAA,WAEA,GAAA,EAAA,GAGA,GAAA,GAAA,QAAA,UAAA,EAAA,GAEA,EAAA,EAAA,EAAA,sBAIF,EAAA,OAAA,QAAA,EAAA,kCAaA,aAAA,YAAA,UAAA,OAAA,WAAA,SAAA,EAAA,EAAA,EAAA,MAEE,GAAA,EAAA,uBAAA,EAAA,2BAGE,aACF,0BAIE,IAAA,MAAA,WACE,SAAA,WAAA,kBAAA,YAAA,YAAA,SAAA,QAAA,UAAA,WAAA,OAAA,YAAA,cAAA,aAAA,SAAA,GACA,QAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAIJ,QAAA,SAAA,QAAA,WAAA,SAAA,oCAEA,EAAA,GAAA,EAAA,YAAA,GACA,QAAA,UAAA,IAAA,EAAA,WACE,GAAA,EAAA,0BAME,WAAA,EAAA,OAAA,EAAA,UAAA,SAAA,EAAA,GACF,QAAA,SAAA,GACF,QAAA,OAAA,EAAA,GAEA,EAAA,QAAA,EAEE,QAAA,UAAA,IAAA,EAAA,WACA,GAAA,EAAA,sBAEF,GAGA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,SAAA,6BAEA,QAAA,SAAA,KAAA,IAAA,EAAA,MAAA,wBACA,KAAA,EAAA,EAAA,OAAA,EAAA,yBAOU,kBACA,eAAA,2BAEQ,EAAA,GAAA,MAAA,KAAA,QAAA,SAAA,yBAMI,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,cAEI,QAAA,QAAA,KACA,EAAA,YACJ,QAAA,EAAA,SAAA,WAAA,IAEI,IAAA,QACA,EAAA,UAGI,eAIQ,EAAA,KAAA,QAER,EAAA,OAAA,EACJ,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OACJ,EAAA,EAAA,gBAEA,GAAA,CACI,QAMxB,2BASF,EAAA,IAAA,sBAAA,wEAKE,MAAA,WACA,EAAA,oCAMN,EAAA,WAAA,QAAA,QAAA,EAAA,MAAA,OAAA,wBAEF,EAAA","file":"popover.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: true\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', ['$document', '$window', '$sce', '$popover', function($document, $window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Bind the click to remove\n        if(options.autoClose) {\n          scope.$on('tooltip.show', function($tooltip) {\n\n              angular.element($document[0].body).bind('click', function (e) {\n\n                  // Dont close all popups just close this one..\n                  //var popups = $document.querySelectorAll('*[bs-popover]');\n                  var popups = [element];\n                  if(popups) {\n                      for(var i=0; i<popups.length; i++) {\n                          var popup = popups[i];\n                          var popupElement = angular.element(popup);\n                          var popupContainer = popupElement.next();\n                          if(popupContainer.length && popupContainer.hasClass('popover')) {\n\n                              var isInside = false;\n                              if(popupContainer == e.target) {\n\n                                  // Clicking on the popup\n                                  isInside = true;\n                              } else {\n\n                                  // Test to see if inside\n                                  var popupContents = popupContainer.find('*');\n                                  var popupContent;\n                                  if (popupContents.length > 0) {\n                                      for (var i = 0, m = popupContents.length; i < m; i++) {\n                                          popupContent = popupContents[i];\n                                          if (popupContent == e.target) {\n                                              isInside = true;\n                                              break;\n                                          }\n                                      }\n                                  }\n                              }\n\n                              if(!isInside) {\n                                  popupElement.scope().$hide();\n                              }\n                          }\n                      }\n                  }\n              });\n          });\n\n          scope.$on('tooltip.hide.before', function($tooltip) {\n              if(options.autoClose) angular.element($document[0].body).unbind('click');\n          });\n        }\n\n        scope.$hide = function() {\n          popover.hide();\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n\n          if(options.autoClose) angular.element($document.body).unbind('click');\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  }]);\n"],"sourceRoot":"/source/"}