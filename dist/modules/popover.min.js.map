{"version":3,"sources":["popover/popover.js"],"names":[],"mappings":"qBASM,OAAA,0BAAA,oCAEA,WAAA,cAEA,GAAA,KAAA,UACA,UAAA,UACA,YAAA,GACA,WAAA,EACA,QAAA,EACA,UAAA,QACA,SAAA,2BACA,iBAAA,EACF,QAAA,oBAEA,MAAA,WAEE,QAAA,sBAEE,QAGA,MAAA,WAAA,SAAA,WAEA,GAAA,EAAA,GAGA,GAAA,GAAA,QAAA,UAAA,EAAA,GAEA,EAAA,EAAA,EAAA,sBAIF,EAAA,OAAA,QAAA,EAAA,kCAaA,aAAA,YAAA,UAAA,OAAA,WAAA,SAAA,EAAA,EAAA,EAAA,MAEE,GAAA,EAAA,uBAAA,EAAA,2BAGE,aACF,0BAIE,IAAA,MAAA,WACE,SAAA,WAAA,kBAAA,YAAA,YAAA,SAAA,QAAA,UAAA,WAAA,OAAA,YAAA,cAAA,aAAA,SAAA,GACA,QAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAIJ,QAAA,SAAA,QAAA,WAAA,SAAA,oCAEA,EAAA,GAAA,EAAA,YAAA,GACA,QAAA,UAAA,IAAA,EAAA,WACE,GAAA,EAAA,0BAME,WAAA,EAAA,OAAA,EAAA,UAAA,SAAA,EAAA,GACF,QAAA,SAAA,GACF,QAAA,OAAA,EAAA,GAEA,EAAA,QAAA,EAEE,QAAA,UAAA,IAAA,EAAA,WACA,GAAA,EAAA,sBAEF,GAGA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,SAAA,6BAEA,QAAA,SAAA,KAAA,IAAA,EAAA,MAAA,6BACI,EAAA,EAAA,OAAA,EAAA,gBAII,EAAA,EAAA,gCAGQ,EAAA,MAAA,KAAA,QAAA,SAAA,SAGA,SAAA,iBAAA,6BAEI,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAIJ,GACA,EAJI,EAAA,EAAA,GACJ,EAAA,QAAA,QAAA,EAIA,GAAA,SACI,EAAA,EAAA,OAAA,GAAA,cAAA,sBACI,EAAA,OAAA,GAAA,cAAA,WAKR,GAAA,EAAA,QAAA,EAAA,QAAA,GAAA,EAAA,QAAA,GACJ,EAAA,OAAA,SAAA,aAER,EAAA,OAAA,8DAaR,EAAA,WAAA,QAAA,QAAA,EAAA,MAAA,OAAA,wBAEF,EAAA","file":"popover.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: true\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', ['$document', '$window', '$sce', '$popover', function($document, $window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        if(options.autoClose) {\n            angular.element($document.body).bind('click', function (e) {\n\n                // Find all elements with the popover attribute\n                var popups = document.querySelectorAll('*[bs-popover]');\n                if(popups) {\n                    for(var i=0; i<popups.length; i++) {\n                        var popup = popups[i];\n                        var popupElement = angular.element(popup);\n\n                        var content;\n                        var arrow;\n                        if(popupElement.next()) {\n                            content = popupElement.next()[0].querySelector('.popover-content');\n                            arrow = popupElement.next()[0].querySelector('.arrow');\n                        }\n                        //If the following condition is met, then the click does not correspond\n                        //to a click on the current popover in the loop or its content.\n                        //So, we can safely remove the current popover's content and set the scope property of the popover\n                        if(popup != e.target && e.target != content && e.target != arrow) {\n                            if(popupElement.next().hasClass('popover')) {\n                                //Remove the popover content\n                                popupElement.next().remove();\n                                //Set the scope to reflect this\n                                popupElement.attr('bs-show', false);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n\n          if(options.autoClose) angular.element($document.body).unbind('click');\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  }]);\n"],"sourceRoot":"/source/"}